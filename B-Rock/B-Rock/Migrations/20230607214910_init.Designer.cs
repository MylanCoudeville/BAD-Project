// <auto-generated />
using System;
using B_Rock.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace B_Rock.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230607214910_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("B_Rock.Data.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Benny",
                            InstrumentId = 1,
                            LastName = "Aghassi",
                            Role = "Shared principal",
                            UniqueURL = "Benny-Aghassi.jpg"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Tomasz",
                            InstrumentId = 1,
                            LastName = "Wesolowski",
                            Role = "Shared principal",
                            UniqueURL = "Tomasz-Aghassi.jpg"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Julien",
                            InstrumentId = 2,
                            LastName = "Barre",
                            Role = "Shared principal",
                            UniqueURL = "Julien-Barre.jpg"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Rebecca",
                            InstrumentId = 2,
                            LastName = "Rosen",
                            Role = "Shared principal",
                            UniqueURL = "Rebecca-Rosen.jpg"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Vincenzo",
                            InstrumentId = 3,
                            LastName = "Casale",
                            Role = "Shared principal",
                            UniqueURL = "Vincenzo-Casale.jpg"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Jean-Philippe",
                            InstrumentId = 3,
                            LastName = "Ponchin",
                            UniqueURL = "Jean-Philippe-Ponchin.jpg"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Cecilia",
                            InstrumentId = 4,
                            LastName = "Bernardini",
                            Role = "Acting concertmaster"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Evgeny",
                            InstrumentId = 4,
                            LastName = "Sviridov",
                            Role = "Acting concertmaster",
                            UniqueURL = "Evgeny-Sviridov.jpg"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Tom",
                            InstrumentId = 5,
                            LastName = "Devaere",
                            Role = "Principal",
                            UniqueURL = "Tom-Devaere.jpg"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Elise",
                            InstrumentId = 5,
                            LastName = "Christiaens",
                            UniqueURL = "Elise-Christiaens.jpg"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Karl",
                            InstrumentId = 6,
                            LastName = "Nyhlin",
                            UniqueURL = "Karl-Nyhlin.jpg"
                        },
                        new
                        {
                            Id = 12,
                            FirstName = "Jean-Marc",
                            InstrumentId = 7,
                            LastName = "Philippe",
                            Role = "Acting principal",
                            UniqueURL = "Jean-Marc-Philippe.jpg"
                        },
                        new
                        {
                            Id = 13,
                            FirstName = "Stefaan",
                            InstrumentId = 7,
                            LastName = "Verdegem",
                            UniqueURL = "Stefaan-Verdegem.jpg"
                        },
                        new
                        {
                            Id = 14,
                            FirstName = "Bart",
                            InstrumentId = 8,
                            LastName = "Aerbeydt",
                            Role = "Shared principal",
                            UniqueURL = "Bart-Aerbeydt.jpg"
                        },
                        new
                        {
                            Id = 15,
                            FirstName = "Jeroen",
                            InstrumentId = 8,
                            LastName = "Billiet",
                            Role = "Shared principal"
                        },
                        new
                        {
                            Id = 16,
                            FirstName = "Mark",
                            InstrumentId = 8,
                            LastName = "De Merlier",
                            UniqueURL = "Mark-De-Merlier.jpg"
                        },
                        new
                        {
                            Id = 17,
                            FirstName = "Andreas",
                            InstrumentId = 9,
                            LastName = "Küppers",
                            UniqueURL = "Andres-Küppers.jpg"
                        },
                        new
                        {
                            Id = 18,
                            FirstName = "Jan",
                            InstrumentId = 10,
                            LastName = "Huylebroeck",
                            Role = "Shared principal",
                            UniqueURL = "Jan-Huylebroeck.jpg"
                        },
                        new
                        {
                            Id = 19,
                            FirstName = "Koen",
                            InstrumentId = 10,
                            LastName = "Plaetinck",
                            Role = "Shared principal"
                        },
                        new
                        {
                            Id = 20,
                            FirstName = "Tami",
                            InstrumentId = 11,
                            LastName = "Krausz",
                            Role = "Principal",
                            UniqueURL = "Tami-Krausz.jpg"
                        },
                        new
                        {
                            Id = 21,
                            FirstName = "Sien",
                            InstrumentId = 11,
                            LastName = "Huybrechts",
                            UniqueURL = "Sien-Huybrechts.jpg"
                        },
                        new
                        {
                            Id = 22,
                            FirstName = "Raquel",
                            InstrumentId = 12,
                            LastName = "Massadas",
                            Role = "Principal",
                            UniqueURL = "Raquel-Massadas.jpg"
                        },
                        new
                        {
                            Id = 23,
                            FirstName = "Luc",
                            InstrumentId = 12,
                            LastName = "Gysbregts",
                            UniqueURL = "Luc-Gysbregts.jpg"
                        },
                        new
                        {
                            Id = 24,
                            FirstName = "Manuela",
                            InstrumentId = 12,
                            LastName = "Bucher",
                            UniqueURL = "Manuela-Bucher.jpg"
                        },
                        new
                        {
                            Id = 25,
                            FirstName = "David",
                            InstrumentId = 13,
                            LastName = "Wish",
                            UniqueURL = "David-Wish.jpg"
                        },
                        new
                        {
                            Id = 26,
                            FirstName = "Sara",
                            InstrumentId = 13,
                            LastName = "Decorso",
                            UniqueURL = "Sara-Decorso.jpg"
                        },
                        new
                        {
                            Id = 27,
                            FirstName = "Ellie",
                            InstrumentId = 13,
                            LastName = "Nimeroski",
                            UniqueURL = "Ellie-Nimeroski.jpg"
                        },
                        new
                        {
                            Id = 28,
                            FirstName = "Jivka",
                            InstrumentId = 13,
                            LastName = "Kaltcheva",
                            UniqueURL = "Jivka-Kaltcheva.jpg"
                        },
                        new
                        {
                            Id = 29,
                            FirstName = "Liesbeth",
                            InstrumentId = 13,
                            LastName = "Nijs",
                            UniqueURL = "Liesbeth-Nijs.jpg"
                        },
                        new
                        {
                            Id = 30,
                            FirstName = "Madoka",
                            InstrumentId = 13,
                            LastName = "Nakamaru",
                            UniqueURL = "Madoka-Nakamaru.jpg"
                        },
                        new
                        {
                            Id = 31,
                            FirstName = "Ortwin",
                            InstrumentId = 13,
                            LastName = "Lowyck",
                            UniqueURL = "Ortwin-Lowyck.jpg"
                        },
                        new
                        {
                            Id = 32,
                            FirstName = "Shiho",
                            InstrumentId = 13,
                            LastName = "Ono",
                            UniqueURL = "Shiho-Ono.jpg"
                        },
                        new
                        {
                            Id = 33,
                            FirstName = "Rebecca",
                            InstrumentId = 13,
                            LastName = "Huber",
                            UniqueURL = "Rebecca-Huber.jpg"
                        },
                        new
                        {
                            Id = 34,
                            FirstName = "Yukie",
                            InstrumentId = 13,
                            LastName = "Yamaguchi",
                            UniqueURL = "Yukie-Yamaguchi.jpg"
                        });
                });

            modelBuilder.Entity("B_Rock.Data.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Concerts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Antwerp",
                            Country = "BE",
                            DateAndTime = new DateTime(2023, 5, 25, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternLink = "https://b-rock.org/project/mozart-mass-3/",
                            Location = "De Singel",
                            PerformedBy = "Haydn & Mozart with Vox Luminis XL",
                            Price = 15.0,
                            Title = "Mozart Mass",
                            UniqueURL = "Mozart-Mass.jpg"
                        },
                        new
                        {
                            Id = 2,
                            City = "Rouen",
                            Country = "FR",
                            DateAndTime = new DateTime(2023, 6, 1, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternLink = "https://b-rock.org/project/tears-of-melancholy-2/",
                            Location = "Chapelle Corneille",
                            PerformedBy = "Antoine Tamestit & B'Rock",
                            Price = 25.0,
                            Title = "Tears Of Melancholy",
                            UniqueURL = "Tears-Of-Melancholy.jpg"
                        },
                        new
                        {
                            Id = 3,
                            City = "Stockholm",
                            Country = "SE",
                            DateAndTime = new DateTime(2023, 6, 2, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternLink = "https://b-rock.org/project/monteverdis-journey/",
                            Location = "The German Church",
                            PerformedBy = "B’Rock Orchestra & Vocal Consort",
                            Price = 35.0,
                            Title = "The Travels Of Monteverdi",
                            UniqueURL = "The-Travels-Of-Monteverdi.jpg"
                        },
                        new
                        {
                            Id = 4,
                            City = "Reims",
                            Country = "FR",
                            DateAndTime = new DateTime(2023, 6, 24, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            ExternLink = "https://b-rock.org/project/un-nouveau-vent/",
                            Location = "Opéra de Raims",
                            PerformedBy = "Fin de siècle à Paris",
                            Price = 45.0,
                            Title = "Un Nouveau Vent",
                            UniqueURL = "Un-Nouveau-Vent.jpg"
                        });
                });

            modelBuilder.Entity("B_Rock.Data.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bassoon"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cello"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clarinet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Concertmaster"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Double bass"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Guitar"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Oboe"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horn"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Piano"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Timpani"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Traverso"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Viola"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Violin"
                        });
                });

            modelBuilder.Entity("B_Rock.Data.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "aglaja@b-rock.org",
                            FirstName = "Aglaja",
                            LastName = "Thiesen",
                            PhoneNumber = "+32 471 69 52 19",
                            Role = "General Direction",
                            UniqueURL = "Aglaja-Thiesen.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Email = "albert@b-rock.org",
                            FirstName = "Albert",
                            LastName = "Edelman",
                            PhoneNumber = "+32 499 93 48 23",
                            Role = "Artistic Direction",
                            UniqueURL = "Albert-Edelman.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Email = "davina@b-rock.org",
                            FirstName = "Davina",
                            LastName = "Van Belle",
                            PhoneNumber = "+32 477 98 04 28",
                            Role = "Business Direction",
                            UniqueURL = "Davina-VanBelle.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Email = "claire@b-rock.org",
                            FirstName = "Claire",
                            LastName = "Desmedt",
                            PhoneNumber = "+32 494 48 79 62",
                            Role = "Administration & Participation",
                            UniqueURL = "Claire-Desmedt.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Email = "tom@b-rock.org",
                            FirstName = "Tom",
                            LastName = "Devaere",
                            Role = "Casting Coordination & Music Libary",
                            UniqueURL = "Tom-Devaere.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Email = "sharon@b-rock.org",
                            FirstName = "Sharon",
                            LastName = "Buffel",
                            PhoneNumber = "+32 491 25 22 33",
                            Role = "Communication, Planning & Production",
                            UniqueURL = "Sharon-Buffel.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Email = "toon@b-rock.org",
                            FirstName = "Toon",
                            LastName = "Vannieuwenhuyse",
                            PhoneNumber = "+32 476 41 79 05",
                            Role = "Production & Libary",
                            UniqueURL = "Toon-Vannieuwenhuyse.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Email = "laurent@b-rock.org",
                            FirstName = "Laurent",
                            LastName = "Langlois",
                            PhoneNumber = "+33 610 27 11 38",
                            Role = "International Relations",
                            UniqueURL = "Laurent-Langlois.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("B_Rock.Data.Artist", b =>
                {
                    b.HasOne("B_Rock.Data.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
